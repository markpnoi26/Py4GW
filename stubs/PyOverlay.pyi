from typing import overload

class Point2D:
    x: int
    y: int

    def __init__(self, x: int, y: int) -> None: ...
    
    def __iter__(self):
        yield self.x
        yield self.y

class Point3D:
    x: float
    y: float
    z: float

    def __init__(self, x: float, y: float, z: float) -> None: ...
    

class Overlay:
    def __init__(self) -> None: ...
    def RefreshDrawList(self) -> None: ...
    def GetMouseCoords(self) -> Point2D: ...
    def FindZ(self, x: float, y: float, pz: float=0) -> float: ...
    def WorldToScreen(self, x: float, y: float, z: float) -> Point2D: ...
    def GetMouseWorldPos(self) -> Point3D: ...
    #Game <-> World
    def GamePosToWorldMap(self, x: float, y: float) -> Point2D: ...
    def WorlMapToGamePos(self, x: float, y: float) -> Point2D: ...
    #World <-> Screen
    def WorldMapToScreen(self, x: float, y: float) -> Point2D: ...
    def ScreenToWorldMap(self, x: float, y: float) -> Point2D: ...
    #Game <-> Screen (combined) 
    def GameMapToScreen(self, x: float, y: float) -> Point2D: ...
    def ScreenToGameMapPos(self, x: float, y: float) -> Point2D: ...
    #NormalizedScreen <-> Screen
    def NormalizedScreenToScreen(self, x: float, y: float) -> Point2D: ...
    def ScreenToNormalizedScreen(self, x: float, y: float) -> Point2D: ...
    #NormalizedScreen <-> World / Game
    def NormalizedScreenToWorldMap(self, x: float, y: float) -> Point2D: ...
    def NormalizedScreenToGameMap(self, x: float, y: float) -> Point2D: ...
    def GamePosToNormalizedScreen(self, x: float, y: float) -> Point2D: ...
    
    @overload
    def BeginDraw(self) -> None: ...
    @overload
    def BeginDraw(self, name:str) -> None: ...
    @overload
    def BeginDraw(self, name:str, x:int, y:int, width:int, height:int) -> None: ...
    def EndDraw(self) -> None: ...
    def DrawLine(self, from_: Point2D, to: Point2D, color: int = 0xFFFFFFFF, thickness: float = 1.0) -> None: ...
    def DrawLine3D(self, from_: Point3D, to: Point3D, color: int = 0xFFFFFFFF, thickness: float = 1.0) -> None: ...
    def DrawTriangle(self, p1: Point2D, p2: Point2D, p3: Point2D, color: int = 0xFFFFFFFF, thickness: float = 1.0) -> None: ...
    def DrawTriangle3D(self, p1: Point3D, p2: Point3D, p3: Point3D, color: int = 0xFFFFFFFF, thickness: float = 1.0) -> None: ...
    def DrawTriangleFilled(self, p1: Point2D, p2: Point2D, p3: Point2D, color: int = 0xFFFFFFFF) -> None: ...
    def DrawTriangleFilled3D(self, p1: Point3D, p2: Point3D, p3: Point3D, color: int = 0xFFFFFFFF) -> None: ...
    def DrawQuad(self, p1: Point2D, p2: Point2D, p3: Point2D, p4: Point2D, color: int = 0xFFFFFFFF, thickness: float = 1.0) -> None: ...
    def DrawQuad3D(self, p1: Point3D, p2: Point3D, p3: Point3D, p4: Point3D, color: int = 0xFFFFFFFF, thickness: float = 1.0) -> None: ...
    def DrawQuadFilled(self, p1: Point2D, p2: Point2D, p3: Point2D, p4: Point2D, color: int = 0xFFFFFFFF) -> None: ...
    def DrawQuadFilled3D(self, p1: Point3D, p2: Point3D, p3: Point3D, p4: Point3D, color: int = 0xFFFFFFFF) -> None: ...
    def DrawPoly(self, center: Point2D, radius: float, color: int = 0xFFFFFFFF, numSegments: int = 12, thickness: float = 1.0) -> None: ...
    def DrawPoly3D(self, center: Point3D, radius: float, color: int = 0xFFFFFFFF, numSegments: int = 12, thickness: float = 1.0, autoZ: bool = True) -> None: ...
    def DrawPolyFilled(self, center: Point2D, radius: float, color: int = 0xFFFFFFFF, numSegments: int = 12) -> None: ...
    def DrawPolyFilled3D(self, center: Point3D, radius: float, color: int = 0xFFFFFFFF, numSegments: int = 12, autoZ: bool = True) -> None: ...
    def DrawCubeOutline(self, center: Point3D, size: float, color: int = 0xFFFFFFFF, thickness: float = 1.0) -> None: ...
    def DrawCubeFilled(self, center: Point3D, size: float, color: int = 0xFFFFFFFF) -> None: ...

    def DrawText(self, position: Point2D, text: str, color: int, centered: bool = True, scale: float = 1.0) -> None: ...
    def DrawText3D(self, position3D: Point3D, text: str, color: int, autoZ: bool = True, centered: bool = True, scale: float = 1.0) -> None: ...
    def GetDisplaySize(self) -> Point2D: ...
    def IsMouseClicked(self, button: int = 0) -> bool: ...
    def PushClipRect(self, x: int, y: int, x2: int, y2: int) -> None: ...
    def PopClipRect(self) -> None: ...
    
    @overload
    def DrawTexture(self, texture_path, width:float=32.0, height:float=32.0) -> None: ...
    @overload
    def DrawTexture(self, texture_path, size:tuple[float, float], uv0:tuple[float, float], uv1:tuple[float, float], tint:tuple[int, int, int, int], border_color:tuple[int, int, int, int]) -> None: ...
    @overload
    def DrawTexturedRect(self, x: int, y: int, width: int, height: int, texture_path) -> None: ...
    @overload
    def DrawTexturedRect(self, pos: tuple[float, float], size: tuple[float, float], texture_path: str, uv0: tuple[float, float] = (0.0, 0.0), uv1: tuple[float, float] = (1.0, 1.0), tint: tuple[int, int, int, int] = (255, 255, 255, 255)) -> None: ...
    def UpkeepTextures(self, upkeep_timer: int = 30) -> None: ...
    @overload
    def ImageButton(self, caption: str, texture_path: str, width: float = 32.0, height: float = 32.0, frame_padding: int = -1) -> bool: ...
    @overload
    def ImageButton(self, caption: str, texture_path: str, size: tuple[float, float], uv0: tuple[float, float] = (0.0, 0.0), uv1: tuple[float, float] = (1.0, 1.0), bg_color: tuple[int, int, int, int] = (0, 0, 0, 0), tint_color: tuple[int, int, int, int] = (255, 255, 255, 255), frame_padding: int = -1) -> bool: ...
    
    def DrawTextureInForegound(self,pos: tuple[float, float], size: tuple[float, float], texture_path: str, uv0: tuple[float, float] = (0.0, 0.0), uv1: tuple[float, float] = (1.0, 1.0), tint: tuple[int, int, int, int] = (255, 255, 255, 255) ) -> None: ...
    
    def DrawTextureInDrawlist(self,pos: tuple[float, float], size: tuple[float, float], texture_path: str, uv0: tuple[float, float] = (0.0, 0.0), uv1: tuple[float, float] = (1.0, 1.0), tint: tuple[int, int, int, int] = (255, 255, 255, 255) ) -> None: ...
