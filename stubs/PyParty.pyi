# PyParty.pyi - Auto-generated .pyi file for PyParty module

from typing import Any
from typing import List
from typing import overload

from .PyAgent import Profession

# Enum HeroType
class HeroType:
    NoHero: int
    Norgu: int
    Goren: int
    Tahlkora: int
    MasterOfWhispers: int
    AcolyteJin: int
    Koss: int
    Dunkoro: int
    AcolyteSousuke: int
    Melonni: int
    ZhedShadowhoof: int
    GeneralMorgahn: int
    MagridTheSly: int
    Zenmai: int
    Olias: int
    Razah: int
    MOX: int
    KeiranThackeray: int
    Jora: int
    PyreFierceshot: int
    Anton: int
    Livia: int
    Hayda: int
    Kahmu: int
    Gwen: int
    Xandra: int
    Vekk: int
    Ogden: int
    MercenaryHero1: int
    MercenaryHero2: int
    MercenaryHero3: int
    MercenaryHero4: int
    MercenaryHero5: int
    MercenaryHero6: int
    MercenaryHero7: int
    MercenaryHero8: int
    Miku: int
    ZeiRi: int
	
#class PetInfo
class PetInfo :
    agent_id: int
    owner_agent_id: int
    pet_name: str
    model_file_id1: int
    model_file_id2: int
    behavior: int
    locked_target_id: int

    def __init__(self, owner_agent_id: int) -> None: ...
	
# Class Hero
class Hero:
    @overload
    def __init__(self, hero_id: int) -> None: ...
    @overload
    def __init__(self, hero_name: str) -> None: ...
    def GetID(self) -> int: ...
    def GetName(self) -> str: ...
    def GetProfession(self) -> "Profession": ...
    def GetFlaggingState(self) -> int: ...
    def SetFlaggingState(self, set_state: int) -> bool: ...
    def IsHeroFlagged(self, hero: int) -> bool: ...
    def FlagHero(self, idx: int) -> bool: ...
    def UnflagAllHeroes(self) -> None: ...

# Class PartyTick
class PartyTick:
    def __init__(self, ticked: bool) -> None: ...
    def IsTicked(self) -> bool: ...
    def SetTicked(self, ticked: bool) -> None: ...
    def ToggleTicked(self) -> bool: ...
    def SetTickToggle(self, enable: bool) -> None: ...

# Class PlayerPartyMember
class PlayerPartyMember:
    login_number: int
    called_target_id: int
    is_connected: bool
    is_ticked: bool
    
    def __init__(self, login_number: int, called_target_id: int, is_connected: bool, is_ticked: bool) -> None: ...

# Class HeroPartyMember
class HeroPartyMember:
    agent_id: int
    owner_player_id: int
    hero_id: Hero
    level: int
    primary: "Profession"
    secondary: "Profession"

    def __init__(self, agent_id: int, owner_id: int, hero_id: int, level: int) -> None: ...


# Class HenchmanPartyMember
class HenchmanPartyMember:
    agent_id: int
    profession: "Profession"
    level: int

    def __init__(self, agent_id: int, prof: int, level: int) -> None: ...

# Class PyParty
class PyParty:
    party_id: int
    players: List[PlayerPartyMember]
    heroes: List[HeroPartyMember]
    henchmen: List[HenchmanPartyMember]
    others : List[int]
    is_in_hard_mode: bool
    is_hard_mode_unlocked: bool
    party_size: int
    party_player_count: int
    party_hero_count: int
    party_henchman_count: int
    is_party_defeated: bool
    is_party_loaded: bool
    is_party_leader: bool
    tick: PartyTick
    
    def __init__(self) -> None: ...
    def GetContext(self) -> None: ...
    def ReturnToOutpost(self) -> bool: ...
    def SetHardMode(self, flag: bool) -> bool: ...
    def RespondToPartyRequest(self, party_id: int, accept: bool) -> bool: ...
    def AddHero(self, hero_id: int) -> bool: ...
    def KickHero(self, hero_id: int) -> bool: ...
    def KickAllHeroes(self) -> bool: ...
    def AddHenchman(self, henchman_id: int) -> bool: ...
    def KickHenchman(self, henchman_id: int) -> bool: ...
    def KickPlayer(self, player_id: int) -> bool: ...
    def InvitePlayer(self, player_id: int) -> bool: ...
    def LeaveParty(self) -> bool: ...
    def UseHeroSkill(self, hero_agent_id: int, skill_index: int, target_id: int) -> bool: ...
    def FlagHero(self, agent_id: int, x: float, y: float) -> bool: ...
    def FlagAllHeroes(self, x: float, y: float) -> bool: ...
    def UnflagHero(self, agent_id: int) -> bool: ...
    def UnflagAllHeroes(self) -> bool: ...
    def IsHeroFlagged(self, hero: int) -> bool: ...
    def IsAllFlagged(self) -> bool: ...
    def GetAllFlagX(self) -> float: ...
    def GetAllFlagY(self) -> float: ...
    def GetHeroAgentID(self, hero_index: int) -> int: ...
    def GetAgentHeroID(self, agent_id: int) -> int: ...
    def GetAgentIDByLoginNumber(self, login_number: int) -> int: ...
    def GetPlayerNameByLoginNumber(self, login_number: int) -> str: ...
    def SearchParty(self, search_type: int, advertisement: str) -> bool: ...
    def SearchPartyCancel(self) -> bool: ...
    def SearchPartyReply(self, accept: bool) -> bool: ...
    def SetHeroBehavior(self, agent_id: int, behavior: int) -> None: ...
    def SetPetBehavior(self, behavior: int, lock_target_id: int) -> None: ...
    def GetPetInfo(self, owner_agent_id: int) -> PetInfo: ...
    def GetIsPlayerTicked(self, player_id: int) -> bool: ...
